TestNG  - Testing automation framework (Next Generation), it can generate a proper report. it contains passed,failed and skiped test case results.
Failed test case stored in testng-failed.xml file in test-output folder. if we want to execute only failed test case then we can run this xml file.






We can also decide which perticular testcase to be executed first.





Featues
----------

Generate the report in a proper format including a number of test cases runs, the number of test cases passed, the number of test cases failed, and the number of test cases skipped.
Multiple test cases can be grouped more easily by converting them into testng.xml file. In which you can make priorities which test case should be executed first.
The same test case can be executed multiple times without loops just by using keyword called 'invocation count.'
Using testng, you can execute multiple test cases on multiple browsers, i.e., cross browser testing.
The testing framework can be easily integrated with tools like Maven, Jenkins, etc.
Annotations used in the testing are very easy to understand ex: @BeforeMethod, @AfterMethod, @BeforeTest, @AfterTest
WebDriver has no native mechanism for generating reports. TestNG can generate the report in a readable format

Advantages
-------------
Annotations are easier to understand
Test cases can be grouped more easily
Parallel testing is possible



We can verify testNG report in output folder in eclips.

Note
-------

@Test will run the methods alphabetically

example
@Test
void a_verify() ---->1
{
Assert.fail();
}

@Test
void c_verify() ---->3
{
Assert.assertTrue(true);
}

@Test
void b_verify() ---->2
{
throw new skipException("skiping b_test");
}
to change, we can use priority  . as usual lowest priority executed first, largest priority executed last.

@Test(priority =2)
void c_verify()

Multiple parameters
-----------------------
Summary of TestNG Annotations
@BeforeSuite: The annotated method will be run before all tests in this suite have run.

@AfterSuite: The annotated method will be run after all tests in this suite have run.

@BeforeTest: The annotated method will be run before any test method belonging to the classes inside the tag is run.

@AfterTest: The annotated method will be run after all the test methods belonging to the classes inside the tag have run.

@BeforeGroups: The list of groups that this configuration method will run before. This method is guaranteed to run shortly before the first test method that belongs to any of these groups is invoked.

@AfterGroups: The list of groups that this configuration method will run after. This method is guaranteed to run shortly after the last test method that belongs to any of these groups is invoked.

@BeforeClass: The annotated method will be run before the first test method in the current class is invoked.

@AfterClass: The annotated method will be run after all the test methods in the current class have been run.

@BeforeMethod: The annotated method will be run before each test method.

@AfterMethod: The annotated method will be run after each test method.

@Test: The annotated method is a part of a test case

Conclusion
TestNG is a testing framework that is capable of making Selenium tests easier to understand and of generating reports that are easy to understand.
The main advantages of TestNG over JUnit are the following.
Annotations are easier to use and understand.
Test cases can be grouped more easily.
TestNG allows us to create parallel tests.
The Console window in Eclipse generates a text-based result while the TestNG window is more useful because it gives us a graphical output of the test result plus other meaningful details such as:
Runtimes of each method.
The chronological order by which methods were executed
TestNG is capable of generating HTML-based reports.
Annotations can use parameters just like the usual Java methods.
@Test(priority = 0, alwaysRun = true)
-------------------------------------------------------
@BeforeTest
@AfterTest


TestNG Groups: Include, Exclude
--------------------------------

TestNG is a Testing framework that covers different types of test designs like unit, functional, end to end, UI and integration test.

You can run a single or multiple packages (package here means to encapsulate a group of classes in a proper director format) by creating XML and run it through maven.

TestNG Group (Include / Exclude)
--------------------------------


We use groups in Testng when,

We don't want to define test methods separately in different classes (depending upon functionality) and
At the same time want to ignore (not to execute) some test cases as if they does not exist in the code.
So to carry out this we have to Group them. This is done by using "include" and "exclude" mechanism supported in testNG.

@Test (groups = { "bonding", "strong_ties" })	


<groups> tag defines the starting of groups in XML.

<groups>		
   <run>		
    <include name="bonding" />		
   </run>		
  </groups>


First is <suite> tag, which holds a logical name which defines full information to testNG reported to generate execution report.
Second is <test name="Guru 99 Smoke Test Demo">, note it is logical name which holds the information of test execution report like pass, fail, skip test cases and other information like total time for execution and group info
Third is <class name="com.group.guru99.TC_Class1" />, com.group.guru99 is the package used, and Test Class name is TC_Class1.


<suite name="Suite">	
		<test name="Guru 99 Smoke Test Demo">	
			<groups>	
				<run>	
   					 <include name="strong_ties" />	
        		</run>	
       		</groups>	
			<classes>	
					<class name="com.group.guru99.TC_Class1" />	
           	</classes>

 </test>	
  </suite>	


another way,

Another mechanism instead of Grouping is "exclude" or "include" in test XML

Exclude Tag:  Syntax for exclude tag <exclude name="${TEST_CASE_NAME}" />
Include Tag:  Syntax for include tag <include name="${TEST_CASE_NAME}" />



Setting Priority
-------------------

Scenario: Generate a code where you are required to perform a Google search with a specific keyword say "Facebook". Now, verify that Browser title is changed to "Facebook - Google Search".

Note: Each step which you code should be in separate methods

Method 1: Open Browser say Firefox (openBrowser())

Method 2: Launch Google.com (launchGoogle())

Method 3: Perform a search using "Facebook" (performSearchAndClick1stLink())

Method 4: Verify Google search page title (FaceBookPageTitleVerification())




